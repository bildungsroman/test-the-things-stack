AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Stackery Serverless CRUD API Demo
Resources:
  function48A53742:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function48A53742
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: listUsers
      CodeUri: src/listUsers
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref table6E08C5D
      Environment:
        Variables:
          TABLE_NAME: !Ref table6E08C5D
          TABLE_ARN: !GetAtt table6E08C5D.Arn
      Events:
        api3FEE112A:
          Type: Api
          Properties:
            Path: /users
            Method: GET
            RestApiId: !Ref api3FEE112A
    Metadata:
      StackeryName: listUsers
  api3FEE112A:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: /users
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /users:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function48A53742.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function1D0BF340.Arn}/invocations
              responses: {}
          /users/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function6871BEC5.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionC2148022.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function5A53E646.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: /users
  function5A53E646:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function5A53E646
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: deleteUser
      CodeUri: src/deleteUser
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref table6E08C5D
      Environment:
        Variables:
          TABLE_NAME: !Ref table6E08C5D
          TABLE_ARN: !GetAtt table6E08C5D.Arn
      Events:
        api3FEE112A:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: DELETE
            RestApiId: !Ref api3FEE112A
    Metadata:
      StackeryName: deleteUser
  function1D0BF340:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function1D0BF340
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: createUser
      CodeUri: src/createUser
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref table6E08C5D
      Environment:
        Variables:
          TABLE_NAME: !Ref table6E08C5D
          TABLE_ARN: !GetAtt table6E08C5D.Arn
      Events:
        api3FEE112A:
          Type: Api
          Properties:
            Path: /users
            Method: POST
            RestApiId: !Ref api3FEE112A
    Metadata:
      StackeryName: createUser
  functionC2148022:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionC2148022
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: updateUser
      CodeUri: src/updateUser
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref table6E08C5D
      Environment:
        Variables:
          TABLE_NAME: !Ref table6E08C5D
          TABLE_ARN: !GetAtt table6E08C5D.Arn
      Events:
        api3FEE112A:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: PUT
            RestApiId: !Ref api3FEE112A
    Metadata:
      StackeryName: updateUser
  function6871BEC5:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function6871BEC5
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getUser
      CodeUri: src/getUser
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref table6E08C5D
      Environment:
        Variables:
          TABLE_NAME: !Ref table6E08C5D
          TABLE_ARN: !GetAtt table6E08C5D.Arn
          GITHUB_SECRET: !Ref EnvConfiggithubSecretAsString
      Events:
        api3FEE112A:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: GET
            RestApiId: !Ref api3FEE112A
    Metadata:
      StackeryName: getUser
  table6E08C5D:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-table6E08C5D
    Metadata:
      StackeryName: Users
  functionEA1CC72D:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionEA1CC72D
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: iPlayNiceWithDbs
      CodeUri: src/functionEA1CC72D
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          DB_INSTANCE: !Ref databaseB5B86CF1
          DB_ADDRESS: !GetAtt databaseB5B86CF1.Endpoint.Address
          DB_PORT: !GetAtt databaseB5B86CF1.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${databaseB5B86CF1}
          DB_PASSWORD: !Ref EnvConfigbadPlaceForADbPasswordAsString
          CHEEZBURGER: !Ref EnvConfigiCanHazSecretAsString
    Metadata:
      StackeryName: iPlayNiceWithDbs
  databaseB5B86CF1:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref databaseB5B86CF1SubnetGroup
      Engine: mysql
      EngineVersion: '5.7'
      MasterUsername: root
      MasterUserPassword: notblank
      MultiAZ: false
      PubliclyAccessible: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
            - ResourceName: pleaseWork
      VPCSecurityGroups:
        - !Ref databaseB5B86CF1SecurityGroup
    Metadata:
      StackeryName: pleaseWork
  databaseB5B86CF1SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: databaseB5B86CF1
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: databaseB5B86CF1
  databaseB5B86CF1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: pleaseWork
      VpcId: !Ref DefaultVPCId
  dockerTask236ECB4F:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref dockerTask236ECB4FLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: hello-world
          Name: 0
          Environment:
            - Name: DOCKER_SECRET
              Value: !Ref EnvConfigbadPlaceForADbPasswordAsString
            - Name: DB_INSTANCE
              Value: !Ref databaseB5B86CF1
            - Name: DB_ADDRESS
              Value: !GetAtt databaseB5B86CF1.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt databaseB5B86CF1.Endpoint.Port
            - Name: DB_ARN
              Value: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${databaseB5B86CF1}
      Cpu: 1024
      ExecutionRoleArn: !GetAtt dockerTask236ECB4FExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt dockerTask236ECB4FTaskRole.Arn
      Volumes: []
    DependsOn: dockerTask236ECB4FLogGroup
    Metadata:
      StackeryName: downWithContainers
  dockerTask236ECB4FLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-dockerTask236ECB4F/hello-world
  dockerTask236ECB4FExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  dockerTask236ECB4FTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  EnvConfiggithubSecretAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/githubSecret
  EnvConfigbadPlaceForADbPasswordAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/badPlaceForADbPassword
  EnvConfigiCanHazSecretAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/iCanHazSecret
Metadata:
  EnvConfigParameters:
    EnvConfiggithubSecretAsString: githubSecret
    EnvConfigbadPlaceForADbPasswordAsString: badPlaceForADbPassword
    EnvConfigiCanHazSecretAsString: iCanHazSecret